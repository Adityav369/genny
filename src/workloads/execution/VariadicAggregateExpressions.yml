SchemaVersion: 2018-07-01
Owner: "@mongodb/query-execution"
Description: |
  This workload measures aggregation expression performance for aggregations that
  can take in a variable number of expressions as arguments.

  While measuring performances, this workload collects numbers
  for either the SBE or the classic engine aggregation expression
  implementations, depending on environments that it runs on.

  Numbers on the 'standalone-all-feature-flags' environment are for
  the SBE variadic aggregation expressions and numbers on the 'standalone'
  environment for the classic variadic aggregation expressions.

Keywords:
- aggregate
- sbe

GlobalDefaults:
  Database: &Database test
  Collection: &Collection Collection0
  DocumentCount: &DocumentCount 1e6
  Repeat: &Repeat 10
  Threads: &Threads 1
  MaxPhases: &MaxPhases 22
  FiveIntFields: &FiveIntFields ["$int1", "$int2", "$int3", "$int4", "$int5"]
  TenIntFields: &TenIntFields ["$int1", "$int2", "$int3", "$int4", "$int5", "$int6", "$int7", "$int8", "$int9", "$int10"]

Actors:
# Clear any pre-existing collection state.
- Name: ClearCollection
  Type: CrudActor
  Database: *Database
  Threads: *Threads
  Phases:
    OnlyActiveInPhases:
      Active: [0]
      NopInPhasesUpTo: *MaxPhases
      PhaseConfig:
        Repeat: 1
        Threads: *Threads
        Collection: *Collection
        Operations:
        - OperationName: drop

- Name: InsertData
  Type: Loader
  Threads: 1
  Phases:
    OnlyActiveInPhases:
      Active: [1]
      NopInPhasesUpTo: *MaxPhases
      PhaseConfig:
        Repeat: 1
        Database: *Database
        Threads: 1
        CollectionCount: 1
        DocumentCount: *DocumentCount
        BatchSize: 1000
        Document:
          int1: {^RandomInt: {min: -100, max: 100}}
          int2: {^RandomInt: {min: -100, max: 100}}
          int3: {^RandomInt: {min: -100, max: 100}}
          int4: {^RandomInt: {min: -100, max: 100}}
          int5: {^RandomInt: {min: -100, max: 100}}
          int6: {^RandomInt: {min: -100, max: 100}}
          int7: {^RandomInt: {min: -100, max: 100}}
          int8: {^RandomInt: {min: -100, max: 100}}
          int9: {^RandomInt: {min: -100, max: 100}}
          int10: {^RandomInt: {min: -100, max: 100}}
          str1: {^RandomString: {length: 16}}
          str2: {^RandomString: {length: 16}}
          str3: {^RandomString: {length: 16}}
          str4: {^RandomString: {length: 16}}
          str5: {^RandomString: {length: 16}}
          str6: {^RandomString: {length: 16}}
          str7: {^RandomString: {length: 16}}
          str8: {^RandomString: {length: 16}}
          str9: {^RandomString: {length: 16}}
          str10: {^RandomString: {length: 16}}
          arr1: &arr1 [{^Repeat: {count: 10, fromGenerator: {b: 1, c: 1}}}]
          arr1Dup1: *arr1
          arr1Dup2: *arr1
          arr1Dup3: *arr1
          arr1Dup4: *arr1
          arr1Dup5: *arr1
          arr1Dup6: *arr1
          arr1Dup7: *arr1
          arr1Dup8: *arr1
          arr1Dup9: *arr1
          arr2: [{^Repeat: {count: 10, fromGenerator: {b: 2, c: 2}}}]
          arr3: [{^Repeat: {count: 10, fromGenerator: {b: 3, c: 3}}}]
          arr4: [{^Repeat: {count: 10, fromGenerator: {b: 4, c: 4}}}]
          arr5: [{^Repeat: {count: 10, fromGenerator: {b: 5, c: 5}}}]
          arr6: [{^Repeat: {count: 10, fromGenerator: {b: 6, c: 6}}}]
          arr7: [{^Repeat: {count: 10, fromGenerator: {b: 7, c: 7}}}]
          arr8: [{^Repeat: {count: 10, fromGenerator: {b: 8, c: 8}}}]
          arr9: [{^Repeat: {count: 10, fromGenerator: {b: 9, c: 9}}}]
          arr10: [{^Repeat: {count: 10, fromGenerator: {b: 10, c: 10}}}]


# Phase 2: Ensure all data is synced to disk.
- Name: Quiesce
  Type: QuiesceActor
  Threads: 1
  Database: *Database
  Phases:
    OnlyActiveInPhases:
      Active: [2]
      NopInPhasesUpTo: *MaxPhases
      PhaseConfig:
        Repeat: 1
        Threads: 1

# Phase 3-N: Run variadic aggregate expression benchmarks
- ExpressionAddFive:
  LoadConfig: &loadConfig
    Path: "../../phases/execution/AggregateExpressions.yml"
    Key: ExpressionTemplate
    Parameters:
      name: VariadicExpressionAddFive
      nopInPhasesUpTo: *MaxPhases
      active: [3]
      operationMetricsName: VariadicAggExpressionAddFive
      Pipeline: [{$project: {add: { $add: *FiveIntFields}}}]

- ExpressionAddTen:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionAddTen
      nopInPhasesUpTo: *MaxPhases
      active: [4]
      operationMetricsName: VariadicAggExpressionAddTen
      Pipeline: [{$project: {add: { $add: *TenIntFields}}}]

- ExpressionConcatFive:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionConcatFive
      nopInPhasesUpTo: *MaxPhases
      active: [5]
      operationMetricsName: VariadicAggExpressionConcatFive
      Pipeline: [{$project: {concat: { $concat: ["$str1", "$str2", "$str3", "$str4", "$str5"]}}}]

- ExpressionConcatTen:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionConcatTen
      nopInPhasesUpTo: *MaxPhases
      active: [6]
      operationMetricsName: VariadicAggExpressionConcatTen
      Pipeline: [{$project: {concat: { $concat: ["$str1", "$str2", "$str3", "$str4", "$str5", "$str6", "$str7", "$str8", "$str9", "$str10"]}}}]

- ExpressionConcatArraysFive:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionConcatArraysFive
      nopInPhasesUpTo: *MaxPhases
      active: [7]
      operationMetricsName: VariadicAggExpressionConcatArraysFive
      Pipeline: [{$project: {concatArrays: { $concatArrays: ["$arr1", "$arr2", "$arr3", "$arr4", "$arr5"]}}}]

- ExpressionConcatArraysTen:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionConcatArraysTen
      nopInPhasesUpTo: *MaxPhases
      active: [8]
      operationMetricsName: VariadicAggExpressionConcatArraysTen
      Pipeline: [{$project: {concatArrays: { $concatArrays: ["$arr1", "$arr2", "$arr3", "$arr4", "$arr5", "$arr6", "$arr7", "$arr8", "$arr9", "$arr10"]}}}]

- ExpressionIfNullFive:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionIfNullFive
      nopInPhasesUpTo: *MaxPhases
      active: [9]
      operationMetricsName: VariadicAggExpressionIfNullFive
      Pipeline: [{$project: {ifNull: { $ifNull: ["$a1", "$a2", "$a3", "$a4", "$a5", 0]}}}]

- ExpressionIfNullTen:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionIfNullTen
      nopInPhasesUpTo: *MaxPhases
      active: [10]
      operationMetricsName: VariadicAggExpressionIfNullTen
      Pipeline: [{$project: {ifNull: { $ifNull: ["$a1", "$a2", "$a3", "$a4", "$a5", "$a6", "$a7", "$a8", "$a9", "$a10", 0]}}}]

- ExpressionLetFive:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionLetFive
      nopInPhasesUpTo: *MaxPhases
      active: [11]
      operationMetricsName: VariadicAggExpressionLetFive
      Pipeline: [{$project: {let: { $let: {vars: { a: "$int1", b: "$int2", c: "$int3", d: "$int4", e: "$int5"}, in: {$add: ["$$a", "$$e"]}}}}}]

- ExpressionLetTen:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionLetTen
      nopInPhasesUpTo: *MaxPhases
      active: [12]
      operationMetricsName: VariadicAggExpressionLetTen
      Pipeline: [{$project: {let: { $let: {vars: { a: "$int1", b: "$int2", c: "$int3", d: "$int4", e: "$int5", f: "$int6", g: "$int7", h: "$int8", i: "$int9", j: "$int10"}, in: {$add: ["$$a", "$$j"]}}}}}]

- ExpressionMultiplyFive:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionMultiplyFive
      nopInPhasesUpTo: *MaxPhases
      active: [13]
      operationMetricsName: VariadicAggExpressionMultiplyFive
      Pipeline: [{$project: {multiply: { $multiply: *FiveIntFields}}}]

- ExpressionMultiplyTen:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionMultiplyTen
      nopInPhasesUpTo: *MaxPhases
      active: [14]
      operationMetricsName: VariadicAggExpressionMultiplyTen
      Pipeline: [{$project: {multiply: { $multiply: *TenIntFields}}}]

- ExpressionSwitchFive:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionSwitchFive
      nopInPhasesUpTo: *MaxPhases
      active: [15]
      operationMetricsName: VariadicAggExpressionSwitchFive
      Pipeline: [{$project: {switch: { $switch: { branches: [{case: {$gt: ["$int1", 100]}, then: "$int1"}, {case: {$gt: ["$int2", 100]}, then: "$int2"}, {case: {$gt: ["$int3", 100]}, then: "$int3"}, {case: {$gt: ["$int4", 100]}, then: "$int4"}, {case: {$gt: ["$int5", 100]}, then: "$int5"}], default: "$int1"}}}}]

- ExpressionSwitchTen:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionSwitchTen
      nopInPhasesUpTo: *MaxPhases
      active: [16]
      operationMetricsName: VariadicAggExpressionSwitchTen
      Pipeline: [{$project: {switch: { $switch: { branches: [{case: {$gt: ["$int1", 100]}, then: "$int1"}, {case: {$gt: ["$int2", 100]}, then: "$int2"}, {case: {$gt: ["$int3", 100]}, then: "$int3"}, {case: {$gt: ["$int4", 100]}, then: "$int4"}, {case: {$gt: ["$int5", 100]}, then: "$int5"}, {case: {$gt: ["$int6", 100]}, then: "$int6"}, {case: {$gt: ["$int7", 100]}, then: "$int7"}, {case: {$gt: ["$int8", 100]}, then: "$int8"}, {case: {$gt: ["$int9", 100]}, then: "$int9"}, {case: {$gt: ["$int10", 100]}, then: "$int10"}], default: "$int1"}}}}]

- ExpressionSetEqualsFive:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionSetEqualsFive
      nopInPhasesUpTo: *MaxPhases
      active: [17]
      operationMetricsName: VariadicAggExpressionSetEqualsFive
      Pipeline: [{$project: {setEquals: { $setEquals: ["$arr1", "$arr1Dup1", "$arr1Dup2", "$arr1Dup3", "$arr1Dup4"]}}}]

- ExpressionSetEqualsTen:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionSetEqualsTen
      nopInPhasesUpTo: *MaxPhases
      active: [18]
      operationMetricsName: VariadicAggExpressionSetEqualsTen
      Pipeline: [{$project: {setEquals: { $setEquals: ["$arr1", "$arr1Dup1", "$arr1Dup2", "$arr1Dup3", "$arr1Dup4", "$arr1Dup5", "$arr1Dup6", "$arr1Dup7", "$arr1Dup8", "$arr1Dup9"]}}}]

- ExpressionSetIntersectionFive:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionSetIntersectionFive
      nopInPhasesUpTo: *MaxPhases
      active: [19]
      operationMetricsName: VariadicAggExpressionSetIntersectionFive
      Pipeline: [{$project: {setIntersection: { $setIntersection: ["$arr1", "$arr1Dup1", "$arr1Dup2", "$arr1Dup3", "$arr1Dup4"]}}}]

- ExpressionSetIntersectionTen:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionSetIntersectionTen
      nopInPhasesUpTo: *MaxPhases
      active: [20]
      operationMetricsName: VariadicAggExpressionSetIntersectionTen
      Pipeline: [{$project: {setIntersection: { $setIntersection: ["$arr1", "$arr1Dup1", "$arr1Dup2", "$arr1Dup3", "$arr1Dup4", "$arr1Dup5", "$arr1Dup6", "$arr1Dup7", "$arr1Dup8", "$arr1Dup9"]}}}]

- ExpressionSetUnionFive:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionSetUnionFive
      nopInPhasesUpTo: *MaxPhases
      active: [21]
      operationMetricsName: VariadicAggExpressionSetIntersectionFive
      Pipeline: [{$project: {setUnion: { $setUnion: ["$arr1", "$arr2", "$arr3", "$arr4", "$arr5"]}}}]

- ExpressionSetIntersectionTen:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionSetUnionTen
      nopInPhasesUpTo: *MaxPhases
      active: [22]
      operationMetricsName: VariadicAggExpressionSetUnionTen
      Pipeline: [{$project: {setUnion: { $setUnion: ["$arr1", "$arr2", "$arr3", "$arr4", "$arr5", "$arr6", "$arr7", "$arr8", "$arr9", "$arr10"]}}}]

AutoRun:
- When:
    mongodb_setup:
      $eq:
      - standalone
      - standalone-all-feature-flags
      - standalone-classic-query-engine
      - standalone-sbe
    branch_name:
      $neq:
      - v4.0
      - v4.2
      - v4.4
      - v5.0
