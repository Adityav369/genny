SchemaVersion: 2018-07-01
Owner: "@mongodb/query-execution"
Description: |
  This workload measures the performance of aggregation expressions that
  can take in a variable number of expressions as arguments.

  While measuring performances, this workload collects numbers
  for either the SBE or the classic engine aggregation expression
  implementations, depending on environments that it runs on.

  Numbers on the 'standalone-all-feature-flags' environment are for
  the SBE variadic aggregation expressions and numbers on the 'standalone'
  environment for the classic variadic aggregation expressions.

Keywords:
- aggregate
- sbe

GlobalDefaults:
  Database: &Database test
  Collection: &Collection Collection0
  DocumentCount: &DocumentCount 1e6
  Repeat: &Repeat 10
  Threads: &Threads 1
  MaxPhases: &MaxPhases 32
  TenIntFields: &TenIntFields ["$int1", "$int2", "$int3", "$int4", "$int5",
                               "$int6", "$int7", "$int8", "$int9", "$int10"]
  TenStrFields: &TenStrFields ["$str1", "$str2", "$str3", "$str4", "$str5",
                               "$str6", "$str7", "$str8", "$str9", "$str10"]
  TenArrFields: &TenArrFields ["$arr1", "$arr2", "$arr3", "$arr4", "$arr5",
                               "$arr6", "$arr7", "$arr8", "$arr9", "$arr10"]
  TenNonExistentFields: &TenNonExistentFields ["$a1", "$a2", "$a3", "$a4", "$a5",
                                               "$a6", "$a7", "$a8", "$a9", "$a10"]
  TenDupArrFields: &TenDupArrFields ["$arr1", "$arr1Dup1", "$arr1Dup2", "$arr1Dup3",
                                     "$arr1Dup4", "$arr1Dup5", "$arr1Dup6", "$arr1Dup7",
                                     "$arr1Dup8", "$arr1Dup9"]
  TenSwitchCaseBranches: &TenSwitchCaseBranches [{case: {$gt: ["$int1", 100]}, then: "$int1"},
                                                 {case: {$gt: ["$int2", 100]}, then: "$int2"},
                                                 {case: {$gt: ["$int3", 100]}, then: "$int3"},
                                                 {case: {$gt: ["$int4", 100]}, then: "$int4"},
                                                 {case: {$gt: ["$int5", 100]}, then: "$int5"},
                                                 {case: {$gt: ["$int6", 100]}, then: "$int6"},
                                                 {case: {$gt: ["$int7", 100]}, then: "$int7"},
                                                 {case: {$gt: ["$int8", 100]}, then: "$int8"},
                                                 {case: {$gt: ["$int9", 100]}, then: "$int9"},
                                                 {case: {$gt: ["$int10", 100]}, then: "$int10"}]

Actors:
# Clear any pre-existing collection state.
- Name: ClearCollection
  Type: CrudActor
  Database: *Database
  Threads: *Threads
  Phases:
    OnlyActiveInPhases:
      Active: [0]
      NopInPhasesUpTo: *MaxPhases
      PhaseConfig:
        Repeat: 1
        Threads: *Threads
        Collection: *Collection
        Operations:
        - OperationName: drop

- Name: InsertData
  Type: Loader
  Threads: 1
  Phases:
    OnlyActiveInPhases:
      Active: [1]
      NopInPhasesUpTo: *MaxPhases
      PhaseConfig:
        Repeat: 1
        Database: *Database
        Threads: 1
        CollectionCount: 1
        DocumentCount: *DocumentCount
        BatchSize: 1000
        Document:
          int1: {^RandomInt: {min: -100, max: 100}}
          int2: {^RandomInt: {min: -100, max: 100}}
          int3: {^RandomInt: {min: -100, max: 100}}
          int4: {^RandomInt: {min: -100, max: 100}}
          int5: {^RandomInt: {min: -100, max: 100}}
          int6: {^RandomInt: {min: -100, max: 100}}
          int7: {^RandomInt: {min: -100, max: 100}}
          int8: {^RandomInt: {min: -100, max: 100}}
          int9: {^RandomInt: {min: -100, max: 100}}
          int10: {^RandomInt: {min: -100, max: 100}}
          str1: {^RandomString: {length: 16}}
          str2: {^RandomString: {length: 16}}
          str3: {^RandomString: {length: 16}}
          str4: {^RandomString: {length: 16}}
          str5: {^RandomString: {length: 16}}
          str6: {^RandomString: {length: 16}}
          str7: {^RandomString: {length: 16}}
          str8: {^RandomString: {length: 16}}
          str9: {^RandomString: {length: 16}}
          str10: {^RandomString: {length: 16}}
          arr1: &arr1 [{^Repeat: {count: 10, fromGenerator: {^RandomInt: {min: -100, max: 100}}}}]
          arr1Dup1: *arr1
          arr1Dup2: *arr1
          arr1Dup3: *arr1
          arr1Dup4: *arr1
          arr1Dup5: *arr1
          arr1Dup6: *arr1
          arr1Dup7: *arr1
          arr1Dup8: *arr1
          arr1Dup9: *arr1
          arr2: [{^Repeat: {count: 10, fromGenerator: {b: 2, c: 2}}}]
          arr3: [{^Repeat: {count: 10, fromGenerator: {b: 3, c: 3}}}]
          arr4: [{^Repeat: {count: 10, fromGenerator: {b: 4, c: 4}}}]
          arr5: [{^Repeat: {count: 10, fromGenerator: {b: 5, c: 5}}}]
          arr6: [{^Repeat: {count: 10, fromGenerator: {b: 6, c: 6}}}]
          arr7: [{^Repeat: {count: 10, fromGenerator: {b: 7, c: 7}}}]
          arr8: [{^Repeat: {count: 10, fromGenerator: {b: 8, c: 8}}}]
          arr9: [{^Repeat: {count: 10, fromGenerator: {b: 9, c: 9}}}]
          arr10: [{^Repeat: {count: 10, fromGenerator: {b: 10, c: 10}}}]

# Phase 2: Ensure all data is synced to disk.
- Name: Quiesce
  Type: QuiesceActor
  Threads: 1
  Database: *Database
  Phases:
    OnlyActiveInPhases:
      Active: [2]
      NopInPhasesUpTo: *MaxPhases
      PhaseConfig:
        Repeat: 1
        Threads: 1

# Phase 3-N: Run variadic aggregate expression benchmarks
- ExpressionAddTen:
  LoadConfig: &loadConfig
    Path: "../../phases/execution/AggregateExpressions.yml"
    Key: ExpressionTemplate
    Parameters:
      name: VariadicExpressionAddTen
      nopInPhasesUpTo: *MaxPhases
      active: [3]
      operationMetricsName: VariadicAggExpressionAddTen
      Pipeline: [{$project:
                    {add:
                       {$add:
                          {^Array: {of: {^Choose: {from: *TenIntFields, deterministic: 1}}, number: 10}}
                       }}}]

- ExpressionAddFifty:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionAddFifty
      nopInPhasesUpTo: *MaxPhases
      active: [4]
      operationMetricsName: VariadicAggExpressionAddFifty
      Pipeline: [{$project:
                    {add:
                       {$add:
                          {^Array: {of: {^Choose: {from: *TenIntFields, deterministic: 1}}, number: 50}}
                       }}}]

- ExpressionAddHundred:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionAddHundred
      nopInPhasesUpTo: *MaxPhases
      active: [5]
      operationMetricsName: VariadicAggExpressionAddHundred
      Pipeline: [{$project:
                    {add:
                       {$add:
                          {^Array: {of: {^Choose: {from: *TenIntFields, deterministic: 1}}, number: 100}}
                       }}}]

- ExpressionConcatTen:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionConcatTen
      nopInPhasesUpTo: *MaxPhases
      active: [6]
      operationMetricsName: VariadicAggExpressionConcatTen
      Pipeline: [{$project:
                    {concat:
                       {$concat:
                          {^Array: {of: {^Choose: {from: *TenStrFields, deterministic: 1}}, number: 10}}
                       }}}]

- ExpressionConcatFifty:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionConcatFifty
      nopInPhasesUpTo: *MaxPhases
      active: [7]
      operationMetricsName: VariadicAggExpressionConcatFifty
      Pipeline: [{$project:
                    {concat:
                       {$concat:
                          {^Array: {of: {^Choose: {from: *TenStrFields, deterministic: 1}}, number: 50}}
                       }}}]

- ExpressionConcatHundred:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionConcatHundred
      nopInPhasesUpTo: *MaxPhases
      active: [8]
      operationMetricsName: VariadicAggExpressionConcatHundred
      Pipeline: [{$project:
                    {concat:
                       {$concat:
                          {^Array: {of: {^Choose: {from: *TenStrFields, deterministic: 1}}, number: 100}}
                       }}}]

- ExpressionConcatArraysTen:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionConcatArraysTen
      nopInPhasesUpTo: *MaxPhases
      active: [9]
      operationMetricsName: VariadicAggExpressionConcatArraysTen
      Pipeline: [{$project:
                    {concatArrays:
                       {$concatArrays:
                          {^Array: {of: {^Choose: {from: *TenArrFields, deterministic: 1}}, number: 10}}
                       }}}]

- ExpressionConcatArraysFifty:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionConcatArraysFifty
      nopInPhasesUpTo: *MaxPhases
      active: [10]
      operationMetricsName: VariadicAggExpressionConcatArraysFifty
      Pipeline: [{$project:
                    {concatArrays:
                       {$concatArrays:
                          {^Array: {of: {^Choose: {from: *TenArrFields, deterministic: 1}}, number: 50}}
                       }}}]

- ExpressionConcatArraysHundred:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionConcatArraysHundred
      nopInPhasesUpTo: *MaxPhases
      active: [11]
      operationMetricsName: VariadicAggExpressionConcatArraysHundred
      Pipeline: [{$project:
                    {concatArrays:
                       {$concatArrays:
                          {^Array: {of: {^Choose: {from: *TenArrFields, deterministic: 1}}, number: 100}}
                       }}}]

# For the following $ifNull test cases, the arguments do not exist in the
# documents that we insert into our collection. This results in executing
# every argument to $ifNull
- ExpressionIfNullTen:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionIfNullTen
      nopInPhasesUpTo: *MaxPhases
      active: [12]
      operationMetricsName: VariadicAggExpressionIfNullTen
      Pipeline: [{$project:
                    {ifNull:
                       {$ifNull:
                          {^Concat:
                             {arrays:
                                [{^Array: {of: {^Choose: {from: *TenNonExistentFields, deterministic: 1}}, number: 10}}, [0]]}}
                       }}}]

- ExpressionIfNullFifty:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionIfNullFifty
      nopInPhasesUpTo: *MaxPhases
      active: [13]
      operationMetricsName: VariadicAggExpressionIfNullFifty
      Pipeline: [{$project:
                    {ifNull:
                       {$ifNull:
                          {^Concat:
                             {arrays:
                                [{^Array: {of: {^Choose: {from: *TenNonExistentFields, deterministic: 1}}, number: 50}}, [0]]}}
                       }}}]

- ExpressionIfNullHundred:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionIfNullHundred
      nopInPhasesUpTo: *MaxPhases
      active: [14]
      operationMetricsName: VariadicAggExpressionIfNullHundred
      Pipeline: [{$project:
                    {ifNull:
                       {$ifNull:
                          {^Concat:
                             {arrays:
                                [{^Array: {of: {^Choose: {from: *TenNonExistentFields, deterministic: 1}}, number: 100}}, [0]]}}
                       }}}]

- ExpressionLetTen:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionLetTen
      nopInPhasesUpTo: *MaxPhases
      active: [15]
      operationMetricsName: VariadicAggExpressionLetTen
      Pipeline: [{$project:
                    {let:
                       {$let:
                          {vars:
                             {
                               a: "$int1", b: "$int2", c: "$int3", d: "$int4", e: "$int5",
                               f: "$int6", g: "$int7", h: "$int8", i: "$int9", j: "$int10"
                             },
                           in: {$add: ["$$a", "$$j"]
                           }}}}}]

- ExpressionLetFifty:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionLetFifty
      nopInPhasesUpTo: *MaxPhases
      active: [16]
      operationMetricsName: VariadicAggExpressionLetFifty
      Pipeline: [{$project:
                    {let:
                       {$let:
                          {vars:
                             {
                               a: "$int1", b: "$int2", c: "$int3", d: "$int4", e: "$int5",
                               f: "$int6", g: "$int7", h: "$int8", i: "$int9", j: "$int10",
                               a1: "$int1", b1: "$int2", c1: "$int3", d1: "$int4", e1: "$int5",
                               f1: "$int6", g1: "$int7", h1: "$int8", i1: "$int9", j1: "$int10",
                               a2: "$int1", b2: "$int2", c2: "$int3", d2: "$int4", e2: "$int5",
                               f2: "$int6", g2: "$int7", h2: "$int8", i2: "$int9", j2: "$int10",
                               a3: "$int1", b3: "$int2", c3: "$int3", d3: "$int4", e3: "$int5",
                               f3: "$int6", g3: "$int7", h3: "$int8", i3: "$int9", j3: "$int10",
                               a4: "$int1", b4: "$int2", c4: "$int3", d4: "$int4", e4: "$int5",
                               f4: "$int6", g4: "$int7", h4: "$int8", i4: "$int9", j4: "$int10",
                             },
                           in: {$add: ["$$a", "$$j4"]
                           }}}}}]

- ExpressionLetHundred:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionLetHundred
      nopInPhasesUpTo: *MaxPhases
      active: [17]
      operationMetricsName: VariadicAggExpressionLetHundred
      Pipeline: [{$project:
                    {let:
                       {$let:
                          {vars:
                             {
                               a: "$int1", b: "$int2", c: "$int3", d: "$int4", e: "$int5",
                               f: "$int6", g: "$int7", h: "$int8", i: "$int9", j: "$int10",
                               a1: "$int1", b1: "$int2", c1: "$int3", d1: "$int4", e1: "$int5",
                               f1: "$int6", g1: "$int7", h1: "$int8", i1: "$int9", j1: "$int10",
                               a2: "$int1", b2: "$int2", c2: "$int3", d2: "$int4", e2: "$int5",
                               f2: "$int6", g2: "$int7", h2: "$int8", i2: "$int9", j2: "$int10",
                               a3: "$int1", b3: "$int2", c3: "$int3", d3: "$int4", e3: "$int5",
                               f3: "$int6", g3: "$int7", h3: "$int8", i3: "$int9", j3: "$int10",
                               a4: "$int1", b4: "$int2", c4: "$int3", d4: "$int4", e4: "$int5",
                               f4: "$int6", g4: "$int7", h4: "$int8", i4: "$int9", j4: "$int10",
                               a5: "$int1", b5: "$int2", c5: "$int3", d5: "$int4", e5: "$int5",
                               f5: "$int6", g5: "$int7", h5: "$int8", i5: "$int9", j5: "$int10",
                               a6: "$int1", b6: "$int2", c6: "$int3", d6: "$int4", e6: "$int5",
                               f6: "$int6", g6: "$int7", h6: "$int8", i6: "$int9", j6: "$int10",
                               a7: "$int1", b7: "$int2", c7: "$int3", d7: "$int4", e7: "$int5",
                               f7: "$int6", g7: "$int7", h7: "$int8", i7: "$int9", j7: "$int10",
                               a8: "$int1", b8: "$int2", c8: "$int3", d8: "$int4", e8: "$int5",
                               f8: "$int6", g8: "$int7", h8: "$int8", i8: "$int9", j8: "$int10",
                               a9: "$int1", b9: "$int2", c9: "$int3", d9: "$int4", e9: "$int5",
                               f9: "$int6", g9: "$int7", h9: "$int8", i9: "$int9", j9: "$int10",
                             },
                           in: {$add: ["$$a", "$$j9"]}
                          }}}}]

- ExpressionMultiplyTen:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionMultiplyTen
      nopInPhasesUpTo: *MaxPhases
      active: [18]
      operationMetricsName: VariadicAggExpressionMultiplyTen
      Pipeline: [{$project:
                    {multiply:
                       {$multiply:
                          {^Array: {of: {^Choose: {from: *TenIntFields, deterministic: 1}}, number: 10}}
                       }}}]

- ExpressionMultiplyFifty:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionMultiplyFifty
      nopInPhasesUpTo: *MaxPhases
      active: [19]
      operationMetricsName: VariadicAggExpressionMultiplyFifty
      Pipeline: [{$project:
                    {multiply:
                       {$multiply:
                          {^Array: {of: {^Choose: {from: *TenIntFields, deterministic: 1}}, number: 50}}
                       }}}]

- ExpressionMultiplyHundred:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionMultiplyHundred
      nopInPhasesUpTo: *MaxPhases
      active: [20]
      operationMetricsName: VariadicAggExpressionMultiplyHundred
      Pipeline: [{$project:
                    {multiply:
                       {$multiply:
                          {^Array: {of: {^Choose: {from: *TenIntFields, deterministic: 1}}, number: 100}}
                       }}}]

- ExpressionSwitchTen:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionSwitchTen
      nopInPhasesUpTo: *MaxPhases
      active: [21]
      operationMetricsName: VariadicAggExpressionSwitchTen
      Pipeline: [{$project:
                    {switch:
                       {$switch:
                          {branches: {^Array: {of: {^Choose: {from: *TenSwitchCaseBranches, deterministic: 1}}, number: 10}},
                           default: "$int1"
                          }}}}]

- ExpressionSwitchFifty:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionSwitchFifty
      nopInPhasesUpTo: *MaxPhases
      active: [22]
      operationMetricsName: VariadicAggExpressionSwitchFifty
      Pipeline: [{$project:
                    {switch:
                       {$switch:
                          {branches: {^Array: {of: {^Choose: {from: *TenSwitchCaseBranches, deterministic: 1}}, number: 50}},
                           default: "$int1"
                          }}}}]

- ExpressionSwitchHundred:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionSwitchHundred
      nopInPhasesUpTo: *MaxPhases
      active: [23]
      operationMetricsName: VariadicAggExpressionSwitchHundred
      Pipeline: [{$project:
                    {switch:
                       {$switch:
                          {branches: {^Array: {of: {^Choose: {from: *TenSwitchCaseBranches, deterministic: 1}}, number: 100}},
                           default: "$int1"
                          }}}}]

- ExpressionSetEqualsTen:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionSetEqualsTen
      nopInPhasesUpTo: *MaxPhases
      active: [24]
      operationMetricsName: VariadicAggExpressionSetEqualsTen
      Pipeline: [{$project:
                    {setEquals:
                       {$setEquals:
                          {^Array: {of: {^Choose: {from: *TenDupArrFields, deterministic: 1}}, number: 10}}
                       }}}]

- ExpressionSetEqualsFifty:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionSetEqualsFifty
      nopInPhasesUpTo: *MaxPhases
      active: [25]
      operationMetricsName: VariadicAggExpressionSetEqualsFifty
      Pipeline: [{$project:
                    {setEquals:
                       {$setEquals:
                          {^Array: {of: {^Choose: {from: *TenDupArrFields, deterministic: 1}}, number: 50}}
                       }}}]

- ExpressionSetEqualsHundred:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionSetEqualsHundred
      nopInPhasesUpTo: *MaxPhases
      active: [26]
      operationMetricsName: VariadicAggExpressionSetEqualsHundred
      Pipeline: [{$project:
                    {setEquals:
                       {$setEquals:
                          {^Array: {of: {^Choose: {from: *TenDupArrFields, deterministic: 1}}, number: 100}}
                       }}}]

- ExpressionSetIntersectionTen:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionSetIntersectionTen
      nopInPhasesUpTo: *MaxPhases
      active: [27]
      operationMetricsName: VariadicAggExpressionSetIntersectionTen
      Pipeline: [{$project:
                    {setIntersection:
                       {$setIntersection:
                          {^Array: {of: {^Choose: {from: *TenDupArrFields, deterministic: 1}}, number: 10}}
                       }}}]

- ExpressionSetIntersectionFifty:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionSetIntersectionFifty
      nopInPhasesUpTo: *MaxPhases
      active: [28]
      operationMetricsName: VariadicAggExpressionSetIntersectionFifty
      Pipeline: [{$project:
                    {setIntersection:
                       {$setIntersection:
                          {^Array: {of: {^Choose: {from: *TenDupArrFields, deterministic: 1}}, number: 50}}
                       }}}]

- ExpressionSetIntersectionHundred:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionSetIntersectionHundred
      nopInPhasesUpTo: *MaxPhases
      active: [29]
      operationMetricsName: VariadicAggExpressionSetIntersectionHundred
      Pipeline: [{$project:
                    {setIntersection:
                       {$setIntersection:
                          {^Array: {of: {^Choose: {from: *TenDupArrFields, deterministic: 1}}, number: 100}}
                       }}}]

- ExpressionSetUnionTen:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionSetUnionTen
      nopInPhasesUpTo: *MaxPhases
      active: [30]
      operationMetricsName: VariadicAggExpressionSetUnionTen
      Pipeline: [{$project:
                    {setUnion:
                       {$setUnion:
                          {^Array: {of: {^Choose: {from: *TenArrFields, deterministic: 1}}, number: 10}}
                       }}}]

- ExpressionSetUnionFifty:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionSetUnionFifty
      nopInPhasesUpTo: *MaxPhases
      active: [31]
      operationMetricsName: VariadicAggExpressionSetUnionFifty
      Pipeline: [{$project:
                    {setUnion:
                       {$setUnion:
                          {^Array: {of: {^Choose: {from: *TenArrFields, deterministic: 1}}, number: 50}}
                       }}}]

- ExpressionSetUnionHundred:
  LoadConfig:
    <<: *loadConfig
    Parameters:
      name: VariadicExpressionSetUnionHundred
      nopInPhasesUpTo: *MaxPhases
      active: [32]
      operationMetricsName: VariadicAggExpressionSetUnionHundred
      Pipeline: [{$project:
                    {setUnion:
                       {$setUnion:
                          {^Array: {of: {^Choose: {from: *TenArrFields, deterministic: 1}}, number: 100}}
                       }}}]

AutoRun:
- When:
    mongodb_setup:
      $eq:
      - standalone
      - standalone-all-feature-flags
      - standalone-classic-query-engine
      - standalone-sbe
    branch_name:
      $neq:
      - v4.0
      - v4.2
      - v4.4
      - v5.0
